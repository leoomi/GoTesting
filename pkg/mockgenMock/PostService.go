// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/leoomi/GoTesting/pkg/post (interfaces: PostService)

// Package mockgen_mocks is a generated GoMock package.
package mockgen_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	post "github.com/leoomi/GoTesting/pkg/post"
)

// MockPostService is a mock of PostService interface.
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService.
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance.
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// AddPost mocks base method.
func (m *MockPostService) AddPost(arg0 post.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPost", arg0)
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostServiceMockRecorder) AddPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostService)(nil).AddPost), arg0)
}

// GetPosts mocks base method.
func (m *MockPostService) GetPosts() []post.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]post.Post)
	return ret0
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostServiceMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostService)(nil).GetPosts))
}
